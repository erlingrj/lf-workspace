target C {
#    flags: "-lm",
    timeout: 5 sec,
};

import PendulumSimulation from "PendulumSimulation.lf"

reactor PendulumController(
    file_path:char[]("res.txt"),
    k_theta:double(1.7),
    k_d_theta:double(0.3),
    k_phi:double(0.03),
    k_d_phi:double(0.06)
) {
    preamble {=
        #include <stdio.h>
    =}
    input theta:double;
    input d_theta:double;
    input phi:double;
    input d_phi:double;

    output u:double;
    
    state fptr:FILE*(0);


    reaction(startup) {=
        self->fptr = fopen(self->file_path, "w+");
        if (self->fptr == NULL) {
            printf("Could not open file \r\n");
            assert(false); //TODO: Can we terminate?
        }

    =}

    reaction(theta, d_theta, phi, d_phi) -> u {=
        double _u = self->k_theta * theta->value
            + self->k_d_theta * d_theta->value
            + self->k_phi * phi->value
            + self->k_d_phi * d_phi->value;
        uint64_t ts = get_elapsed_logical_time();

        int res = fprintf(self->fptr, "%lu %f %f %f %f %f\n", ts, theta->value, d_theta->value, phi->value, d_phi->value, _u);
        if (res == 0) {
            printf("fprintf returned %d\n", res);
        }

        SET(u, _u);
    =}

    reaction(shutdown) {=
        int res = fclose(self->fptr);
        if (res != 0) {
            printf("Could not close file error = %d\n", res);
        }
    =}
}

main reactor {
    plant = new PendulumSimulation(initial_theta = 0.1, sample_period = 5 msec);
    controller = new PendulumController();

    controller.u -> plant.u;
    plant.theta, plant.d_theta, plant.phi, plant.d_phi 
        -> controller.theta, controller.d_theta, controller.phi, controller.d_phi;
}


